// Code generated by hertz generator.

package main

import (
	"context"
	"github.com/Blue-Berrys/Tiktok_e_commerce/app/frontend/infra/rpc"
	"github.com/Blue-Berrys/Tiktok_e_commerce/app/frontend/middleware"
	frontendutils "github.com/Blue-Berrys/Tiktok_e_commerce/app/frontend/utils"
	"github.com/Blue-Berrys/Tiktok_e_commerce/common/mtl"
	hertzprom "github.com/hertz-contrib/monitor-prometheus"
	hertzobslogrus "github.com/hertz-contrib/obs-opentelemetry/logging/logrus"

	hertzoteltracing "github.com/hertz-contrib/obs-opentelemetry/tracing"
	"github.com/hertz-contrib/sessions"
	"github.com/hertz-contrib/sessions/redis"
	"github.com/joho/godotenv"
	"os"
	"time"

	"github.com/Blue-Berrys/Tiktok_e_commerce/app/frontend/biz/router"
	"github.com/Blue-Berrys/Tiktok_e_commerce/app/frontend/conf"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/hertz-contrib/cors"
	"github.com/hertz-contrib/gzip"
	"github.com/hertz-contrib/logger/accesslog"
	hertzlogrus "github.com/hertz-contrib/logger/logrus"
	"github.com/hertz-contrib/pprof"
	"go.uber.org/zap/zapcore"
	"gopkg.in/natefinch/lumberjack.v2"
)

var (
	ServiceName  = frontendutils.ServiceName
	MetricsPort  = conf.GetConf().Hertz.MetricsPort
	RegistryAddr = conf.GetConf().Hertz.RegistryAddr
)

func main() {

	//load env config
	_ = godotenv.Load()

	//init metrics
	consul, registryInfo := mtl.InitMetric(ServiceName, MetricsPort, RegistryAddr)
	defer func() {
		//退出时注销prometheus服务
		_ = consul.Deregister(registryInfo)
	}()

	//init tracing
	p := mtl.InitTracing(ServiceName)
	defer func() { //退出前上传剩余链路数据
		_ = p.Shutdown(context.Background())
	}()

	//init rpc client
	rpc.InitClient()

	// init dal
	// dal.Init()
	address := conf.GetConf().Hertz.Address

	tracer, cfg := hertzoteltracing.NewServerTracer()

	h := server.New(server.WithHostPorts(address),
		server.WithTracer(hertzprom.NewServerTracer(
			"",
			"",
			hertzprom.WithRegistry(mtl.Registry),
			hertzprom.WithDisableServer(true),
		)),
		tracer,
	)
	h.Use(hertzoteltracing.ServerMiddleware(cfg))

	registerMiddleware(h)

	// add a ping route to test
	h.GET("/ping", func(c context.Context, ctx *app.RequestContext) {
		ctx.JSON(consts.StatusOK, utils.H{"ping": "pong"})
	})

	router.GeneratedRegister(h)

	h.LoadHTMLGlob("template/*")
	//这个路径可能不适用于windows.在tmpl文件中先用官方提供的url作为css和js源
	h.Static("/static", "./")

	//router
	h.GET("/about", func(c context.Context, ctx *app.RequestContext) {
		hlog.CtxInfof(c, "CloudWeGo shop about page")
		ctx.HTML(consts.StatusOK, "about", utils.H{"title": "About"})
	})
	h.GET("/sign-in", func(c context.Context, ctx *app.RequestContext) {
		//返回到登录页面的前一个页面(referer路由)
		data := utils.H{
			"Title": "Sign In",
			"next":  ctx.Query("next"),
		}
		ctx.HTML(consts.StatusOK, "sign-in", data)
	})
	h.GET("/sign-up", func(c context.Context, ctx *app.RequestContext) {
		ctx.HTML(consts.StatusOK, "sign-up", utils.H{"ping": "pong"})
	})

	h.Spin()
}

func registerMiddleware(h *server.Hertz) {
	//session
	store, _ := redis.NewStore(10, "tcp", conf.GetConf().Redis.Address, "hhf001113", []byte(os.Getenv("SESSION_SECRET")))
	h.Use(sessions.New("cloudwego-shop", store))

	// log
	//用带链路追踪的logger包装原本的logger
	logger := hertzobslogrus.NewLogger(hertzobslogrus.WithLogger(hertzlogrus.NewLogger().Logger()))
	//logger := hertzlogrus.NewLogger()
	hlog.SetLogger(logger)
	hlog.SetLevel(conf.LogLevel())
	//生产环境每分钟刷盘,测试环境每秒钟刷盘
	var flushInterval time.Duration
	if os.Getenv("GO_ENV") == "online" {
		flushInterval = time.Minute
	} else {
		flushInterval = time.Second
	}
	asyncWriter := &zapcore.BufferedWriteSyncer{
		WS: zapcore.AddSync(&lumberjack.Logger{
			Filename:   conf.GetConf().Hertz.LogFileName,
			MaxSize:    conf.GetConf().Hertz.LogMaxSize,
			MaxBackups: conf.GetConf().Hertz.LogMaxBackups,
			MaxAge:     conf.GetConf().Hertz.LogMaxAge,
		}),
		FlushInterval: flushInterval,
	}
	hlog.SetOutput(asyncWriter)
	h.OnShutdown = append(h.OnShutdown, func(ctx context.Context) {
		asyncWriter.Sync()
	})

	// pprof
	if conf.GetConf().Hertz.EnablePprof {
		pprof.Register(h)
	}

	// gzip
	if conf.GetConf().Hertz.EnableGzip {
		h.Use(gzip.Gzip(gzip.DefaultCompression))
	}

	// access log
	if conf.GetConf().Hertz.EnableAccessLog {
		h.Use(accesslog.New())
	}

	// recovery
	h.Use(recovery.Recovery())

	// cores
	h.Use(cors.Default())

	//apply middleware
	middleware.Register(h)
}
